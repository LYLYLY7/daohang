{"mappings":"AAAA,qCAAqC;AACrC,iBAAiB;AAEjB,MAAM,YAAY,EAAE;AACpB,MAAM,UAAU,UAAU,IAAI,CAAC;AAC/B,MAAM,IAAI,aAAa,OAAO,CAAC;AAC/B,MAAM,UAAU,KAAK,KAAK,CAAC;AAC3B,eAAe;AAEf,MAAM,UAAU,WAAW;IACzB,uCAAuC;IACvC,2BAA2B;IAC3B;QAAE,MAAM;QAAK,KAAK;IAAqC;IACvD;QAAE,MAAM;QAAK,KAAK;IAA2B;IAC7C;QAAE,MAAM;QAAK,KAAK;IAA2B;IAC7C;QAAE,MAAM;QAAK,KAAK;IAAuB;CAC1C;AACD,MAAM,cAAc,CAAC,MAAQ;IAC3B,OAAO,IAAI,OAAO,CAAC,YAAY,IAC5B,OAAO,CAAC,WAAW,IACnB,OAAO,CAAC,QAAQ,IAChB,OAAO,CAAC,QAAQ;AACnB,mBAAmB;AACrB;AACA,MAAM,SAAS,IAAM;IACnB,UAAU,IAAI,CAAC,CAAC,aAAa,CAAC,EAAE,MAAM;IACtC,QAAQ,OAAO,CAAC,CAAC,MAAM,QAAU;QAC/B,qBAAqB;QACrB,iBAAiB;QACjB,MAAM,MAAM,EAAE,CAAC,2EAEgB,EAAE,KAAK,IAAI,CAAC,2CACZ,EAAE,YAAY,KAAK,GAAG,EAAE,uOAOjD,CAAC,EAAE,YAAY,CAAC;QACtB,IAAI,EAAE,CAAC,SAAS,IAAM;YACpB,OAAO,IAAI,CAAC,KAAK,GAAG,EAAC,sBAAsB;;QAC7C;QACA,IAAI,EAAE,CAAC,SAAS,UAAU,CAAC,IAAM;YAC/B,oBAAoB;YACpB,EAAE,eAAe,GAAG,MAAM;;YAC1B,QAAQ,MAAM,CAAC,OAAO,GAAG,eAAe;;YACxC,SAAS,QAAQ;;QACnB;IACF;AACF;AAEA;AAEA,EAAE,cACC,EAAE,CAAC,SAAS,IAAM;IACjB,IAAI,MAAM,OAAO,MAAM,CAAC;IACxB,IAAI,CAAC,KAAK;QACR,MAAM;QACN,OAAO,IAAI;IACb,OAAO,IAAI,IAAI,OAAO,CAAC,YAAY,GACjC,uBAAuB;IACvB,eAAe;IACf,MAAM,CAAC,QAAQ,CAAC,GAAG;IAErB,QAAQ,IAAI,CAAC;QACX,MAAM,YAAY,IAAI,CAAC,EAAE;QACzB,KAAK;IACP;IACA;AACF;AAEF,OAAO,cAAc,GAAG,IAAM;IAC5B,MAAM,SAAS,KAAK,SAAS,CAAC;IAC9B,aAAa,OAAO,CAAC,KAAK;AAC1B,sBAAsB;AACxB;AACA,8BAA8B;AAC9B,mBAAmB;AACnB,EAAE,UAAU,EAAE,CAAC,YAAY,CAAC,IAAM;IAChC,QAAQ,GAAG,CAAC,EAAE,GAAG;IACjB,oBAAoB;IACpB,MAAM,EAAE,IAAG,EAAE,GAAG,EAAG,YAAY;;IAC/B,IAAK,IAAI,IAAI,GAAG,IAAI,QAAQ,MAAM,EAAE,IAClC,IAAI,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC,WAAW,OAAO,KACpC,OAAO,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,GAAG;AAGhC,GACA,8BAA8B","sources":["src/main.js"],"sourcesContent":["// console.log(jQuery)  测试（不提示错误就是成功）\r\n// console.log($)\r\n\r\nconst $siteList = $('.siteList')\r\nconst $lastLi = $siteList.find('li.last')\r\nconst x = localStorage.getItem('x')\r\nconst xObject = JSON.parse(x)\r\n//parse将字符串变成对象\r\n\r\nconst hashMap = xObject || [\r\n  //浏览器控制台，用parcel会加一个作用域，使得hashMap没有被定义。\r\n  //解决方式： window.hashMap = []\r\n  { logo: 'W', url: 'https://webjike.com/web.html#row-1' },\r\n  { logo: 'B', url: 'https://www.bilibili.com' },\r\n  { logo: 'H', url: 'https://www.htmltrip.com' },\r\n  { logo: 'V', url: 'https://cn.vuejs.org' },\r\n]\r\nconst simplifyUrl = (url) => {//删除url里面的https://www.\r\n  return url.replace('https://', '')\r\n    .replace('http://', '')\r\n    .replace('www.', '')\r\n    .replace(/\\/.*/, '')\r\n  //正则表达式 表示删除以/开头的内容\r\n}\r\nconst render = () => {\r\n  $siteList.find(`li:not(.last)`).remove()\r\n  hashMap.forEach((node, index) => {\r\n    // console.log(index)\r\n    //node节点  index参数\r\n    const $li = $(`<li> \r\n             <div class=\"site\">\r\n                 <div class=\"logo\">${node.logo}</div>\r\n                 <div class=\"link\">${simplifyUrl(node.url)}</div>\r\n                 <div class='close'>\r\n                    <svg class=\"icon\">\r\n                        <use xlink:href=\"#icon-close\"></use>\r\n                    </svg>\r\n                </div>\r\n             </div>\r\n     </li>`).insertBefore($lastLi)\r\n    $li.on('click', () => {\r\n      window.open(node.url)//打开一个地址为url的新页面，代替a标签\r\n    })\r\n    $li.on('click', '.close', (e) => {\r\n      // console.log('这里')\r\n      e.stopPropagation() //阻止冒泡\r\n      hashMap.splice(index, 1) //删除索引为index的元素\r\n      render() //重新渲染一次\r\n    })\r\n  })\r\n}\r\n\r\nrender()\r\n\r\n$('.addButton')\r\n  .on('click', () => {\r\n    let url = window.prompt('请问你要添加的网址是')\r\n    if (!url) {\r\n      alert('请输入网址')\r\n      return null\r\n    } else if (url.indexOf('http') !== 0) {\r\n      //indexOf返回数组中指定字符出现的次数\r\n      //判断url是否含有http\r\n      url = `https://` + url\r\n    }\r\n    hashMap.push({\r\n      logo: simplifyUrl(url)[0],\r\n      url: url\r\n    })\r\n    render()\r\n  })\r\n\r\nwindow.onbeforeunload = () => {\r\n  const string = JSON.stringify(hashMap)\r\n  localStorage.setItem('x', string)\r\n  //在本地设置一个变量x存的就是string\r\n}\r\n// 键盘快捷键，按下对应logo的字母自动跳转到相应的页面\r\n// 但输入网址时，写成小写会自动跳转\r\n$(document).on('keypress', (e) => {\r\n  console.log(e.key)\r\n  // const key = e.key\r\n  const { key } = e  //上面语句的另一种写法\r\n  for (let i = 0; i < hashMap.length; i++) {\r\n    if (hashMap[i].logo.toLowerCase() === key) {\r\n      window.open(hashMap[i].url)\r\n    }\r\n  }\r\n})\r\n// document.addEventListener()"],"names":[],"version":3,"file":"index.de158e3a.js.map","sourceRoot":"/__parcel_source_root/"}